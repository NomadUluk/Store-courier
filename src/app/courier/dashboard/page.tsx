'use client'

import { useState, useEffect, useCallback } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { CompactOrderCard } from '@/components/courier/CompactOrderCard'
import { OrderDetailModal } from '@/components/courier/OrderDetailModal'
import { useLanguage } from '@/contexts/LanguageContext'
import { ClockIcon, BoltIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline'
import type { OrderWithDetails, OrderStatus } from '@/types'

type TabType = 'available' | 'my' | 'completed' | 'canceled'

export default function CourierDashboard() {
  console.log('CourierDashboard: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è')
  const { t } = useLanguage()
  const router = useRouter()
  const searchParams = useSearchParams()
  const [orders, setOrders] = useState<OrderWithDetails[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isUpdating, setIsUpdating] = useState(false)
  const [error, setError] = useState('')
  const [selectedOrder, setSelectedOrder] = useState<OrderWithDetails | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [activeTab, setActiveTab] = useState<TabType>('available')
  const [currentCourierId, setCurrentCourierId] = useState<string | null>(null)
  const [previousOrderIds, setPreviousOrderIds] = useState<Set<string>>(new Set())
  const [previousAvailableCount, setPreviousAvailableCount] = useState<number>(0)
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'unknown'>('unknown')
  const [isInitialized, setIsInitialized] = useState<boolean>(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [currentPage, setCurrentPage] = useState({
    available: 1,
    my: 1,
    completed: 1,
    canceled: 1
  })
  const ORDERS_PER_PAGE = 8

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  const checkForNewOrders = useCallback(async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      const countResponse = await fetch('/api/courier/orders/count', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(5000) // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      })
      
      if (!countResponse.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', countResponse.status, countResponse.statusText)
        setConnectionStatus('disconnected')
        return
      }
      
      const countData = await countResponse.json()
      if (!countData.success) {
        console.error('–û—à–∏–±–∫–∞ API —Å—á–µ—Ç—á–∏–∫–∞:', countData.error)
        return
      }
      
      const currentCount = countData.data.count
      
      // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è - –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
      if (currentCount > previousAvailableCount) {
        const newOrdersCount = currentCount - previousAvailableCount
        console.log(`üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newOrdersCount} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤!`)
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        const recentResponse = await fetch(`/api/courier/orders/recent?limit=${newOrdersCount}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          signal: AbortSignal.timeout(5000)
        })
        
        if (!recentResponse.ok) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', recentResponse.status, recentResponse.statusText)
          return
        }
        
        const recentData = await recentResponse.json()
        if (!recentData.success) {
          console.error('–û—à–∏–±–∫–∞ API –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', recentData.error)
          return
        }
        
        const newOrders = recentData.data || []
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        newOrders.forEach(async (order: OrderWithDetails) => {
          try {
            const controller = new AbortController()
            const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch('/api/telegram/notify-new-order', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ orderId: order.id }),
              signal: controller.signal
            })
            
            clearTimeout(timeoutId)
            
            if (response.ok) {
              console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.id.slice(-8))
            } else {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.id.slice(-8), response.status)
            }
          } catch (error) {
            if (error instanceof Error && error.name === 'AbortError') {
              console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.id.slice(-8))
            } else {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
            }
          }
        })
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
      setPreviousAvailableCount(currentCount)
      setConnectionStatus('connected')
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error)
      setConnectionStatus('disconnected')
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
        } else if (error.message.includes('Failed to fetch')) {
          console.log('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É')
        } else {
          console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
        }
      }
    }
  }, [previousAvailableCount])

  const fetchOrders = useCallback(async (showLoading = true) => {
    if (showLoading) setIsLoading(true)
    
    try {
      const response = await fetch('/api/courier/orders', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      })
      
      if (!response.ok) {
        if (response.status === 401) {
          setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.')
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
          router.push('/courier/login')
          return
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      const data = await response.json()

      if (data.success) {
        const newOrders = data.data || []
        
        setOrders(newOrders)
        setPreviousOrderIds(new Set(newOrders.map((order: OrderWithDetails) => order.id)))
        setLastUpdate(new Date())
        setError('')
        setConnectionStatus('connected')
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (showLoading) {
          const availableOrders = newOrders.filter((order: OrderWithDetails) => 
            order.status === 'COURIER_WAIT' && !order.courierId
          )
          setPreviousAvailableCount(availableOrders.length)
          setIsInitialized(true)
        }
      } else {
        setError(data.error || t('error'))
        console.error('–û—à–∏–±–∫–∞ API:', data.error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error)
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          console.log('‚è∞ –ó–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω (—Ç–∞–π–º–∞—É—Ç)')
        } else if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
          console.log('üåê –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω')
          setConnectionStatus('disconnected')
        } else {
          console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setConnectionStatus('disconnected')
      
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      if (showLoading) {
        setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000.')
      }
    } finally {
      if (showLoading) setIsLoading(false)
    }
  }, [router])

  const handleStatusUpdate = async (orderId: string, status: OrderStatus, cancelComment?: string) => {
    setIsUpdating(true)
    try {
      const response = await fetch(`/api/courier/orders/${orderId}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status, cancelComment })
      })

      const data = await response.json()

      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
        setOrders(prevOrders => 
          prevOrders.map(order => 
            order.id === orderId 
              ? { ...order, ...data.data }
              : order
          )
        )
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        if (selectedOrder?.id === orderId) {
          setSelectedOrder({ ...selectedOrder, ...data.data })
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setIsModalOpen(false)
        setSelectedOrder(null)

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        const getTargetTab = (newStatus: OrderStatus): TabType => {
          switch (newStatus) {
            case 'COURIER_PICKED':
            case 'ENROUTE':
              return 'my' // –ú–æ–∏ –∑–∞–∫–∞–∑—ã
            case 'DELIVERED':
              return 'completed' // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            case 'CANCELED':
              return 'canceled' // –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
            default:
              return 'available' // –î–æ—Å—Ç—É–ø–Ω—ã–µ
          }
        }

        const targetTab = getTargetTab(status)
        if (targetTab !== activeTab) {
          setActiveTab(targetTab)
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
          setCurrentPage(prev => ({
            ...prev,
            [targetTab]: 1
          }))
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await fetchOrders(false)
      } else {
        setError(data.error || t('error'))
      }
    } catch (error) {
      setError(t('error'))
    } finally {
      setIsUpdating(false)
    }
  }

  const handleOrderClick = (order: OrderWithDetails) => {
    setSelectedOrder(order)
    setIsModalOpen(true)
  }

  const handleCloseModal = () => {
    setIsModalOpen(false)
    setSelectedOrder(null)
  }

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∑–∞–∫–∞–∑–æ–≤
    const checkAuth = async () => {
      try {
        const response = await fetch('/api/courier/auth/verify')
        if (!response.ok) {
          console.log('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω')
          // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
          document.cookie = 'auth-token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;'
          router.push('/courier/login')
          return
        }
        const data = await response.json()
        console.log('–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', data)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        if (data.success && data.data?.id) {
          setCurrentCourierId(data.data.id)
        }
        fetchOrders()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
        // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        document.cookie = 'auth-token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;'
        router.push('/courier/login')
      }
    }
    
    checkAuth()
  }, [fetchOrders, router])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –≤–∫–ª–∞–¥–∫–µ
  useEffect(() => {
    if (orders.length > 0) {
      const orderId = searchParams.get('order')
      const tab = searchParams.get('tab')
      
      if (orderId) {
        // –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ ID –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const order = orders.find(o => o.id === orderId)
        if (order) {
          setSelectedOrder(order)
          setIsModalOpen(true)
        }
      }
      
      if (tab && ['available', 'my', 'completed', 'canceled'].includes(tab)) {
        setActiveTab(tab as TabType)
      }
    }
  }, [orders, searchParams])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(() => {
      if (isInitialized) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        checkForNewOrders()
        // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        fetchOrders(false) // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –ø–æ–∫–∞–∑–∞ loading
      }
    }, 10000) // 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval)
  }, [fetchOrders, checkForNewOrders, isInitialized])

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã - —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª (COURIER_WAIT) –∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
  const availableOrders = orders.filter(order => 
    order.status === 'COURIER_WAIT' && !order.courierId
  )
  
  // –ú–æ–∏ –∑–∞–∫–∞–∑—ã - —Ç–µ, —á—Ç–æ —è –ø—Ä–∏–Ω—è–ª –≤ —Ä–∞–±–æ—Ç—É (—Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–∫–∞–∑—ã)
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑—ã "–í –ø—É—Ç–∏" (ENROUTE) –±—ã–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞
  const myOrders = orders
    .filter(order => 
      order.courierId === currentCourierId && ['COURIER_PICKED', 'ENROUTE'].includes(order.status)
    )
    .sort((a, b) => {
      // –ó–∞–∫–∞–∑—ã "–í –ø—É—Ç–∏" (ENROUTE) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
      if (a.status === 'ENROUTE' && b.status !== 'ENROUTE') return -1
      if (b.status === 'ENROUTE' && a.status !== 'ENROUTE') return 1
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    })
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã - —Ç–µ, —á—Ç–æ —è –¥–æ—Å—Ç–∞–≤–∏–ª (—Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–∫–∞–∑—ã)
  const completedOrders = orders.filter(order => 
    order.status === 'DELIVERED' && order.courierId === currentCourierId
  )
  
  // –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã - —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–∫–∞–∑—ã)
  const canceledOrders = orders.filter(order => 
    order.status === 'CANCELED' && order.courierId === currentCourierId
  )

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const getPaginatedOrders = (ordersList: OrderWithDetails[], tabType: TabType) => {
    const page = currentPage[tabType]
    const startIndex = (page - 1) * ORDERS_PER_PAGE
    const endIndex = startIndex + ORDERS_PER_PAGE
    return ordersList.slice(startIndex, endIndex)
  }

  const getTotalPages = (ordersList: OrderWithDetails[]) => {
    return Math.ceil(ordersList.length / ORDERS_PER_PAGE)
  }

  const handlePageChange = (tabType: TabType, page: number) => {
    setCurrentPage(prev => ({
      ...prev,
      [tabType]: page
    }))
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const currentAvailableOrders = getPaginatedOrders(availableOrders, 'available')
  const currentMyOrders = getPaginatedOrders(myOrders, 'my')
  const currentCompletedOrders = getPaginatedOrders(completedOrders, 'completed')
  const currentCanceledOrders = getPaginatedOrders(canceledOrders, 'canceled')

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const PaginationComponent = ({ 
    totalItems, 
    currentPageNum, 
    tabType 
  }: { 
    totalItems: number; 
    currentPageNum: number; 
    tabType: TabType 
  }) => {
    const totalPages = getTotalPages(Array(totalItems).fill(null))
    
    if (totalPages <= 1) return null
    
    return (
      <div className="flex justify-center items-center space-x-2 mt-6">
        <button
          onClick={() => handlePageChange(tabType, Math.max(1, currentPageNum - 1))}
          disabled={currentPageNum === 1}
          className={`px-3 py-1 rounded ${
            currentPageNum === 1 
              ? 'bg-gray-200 text-gray-400 cursor-not-allowed' 
              : 'bg-orange-500 text-white hover:bg-orange-600'
          }`}
        >
          ‚Üê
        </button>
        
        {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
          <button
            key={page}
            onClick={() => handlePageChange(tabType, page)}
            className={`px-3 py-1 rounded ${
              page === currentPageNum
                ? 'bg-orange-500 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-orange-100'
            }`}
          >
            {page}
          </button>
        ))}
        
        <button
          onClick={() => handlePageChange(tabType, Math.min(totalPages, currentPageNum + 1))}
          disabled={currentPageNum === totalPages}
          className={`px-3 py-1 rounded ${
            currentPageNum === totalPages 
              ? 'bg-gray-200 text-gray-400 cursor-not-allowed' 
              : 'bg-orange-500 text-white hover:bg-orange-600'
          }`}
        >
          ‚Üí
        </button>
        
        <span className="text-sm text-gray-600 ml-4">
          –°—Ç—Ä. {currentPageNum} –∏–∑ {totalPages} ({totalItems} –≤—Å–µ–≥–æ)
        </span>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className="px-4 py-8">
        <div className="flex items-center justify-center min-h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">{t('loading')}</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 w-full h-full px-4 py-3 overflow-y-auto" style={{ backgroundColor: 'var(--background)' }}>
      <div className="space-y-3">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-1 lg:grid-cols-6 gap-3 mb-3">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="lg:col-span-2">
            <h1 className="text-xl font-bold mb-1" style={{ color: 'var(--foreground)' }}>{t('courierPanel')}</h1>
            <p className="text-sm" style={{ color: 'var(--muted)' }}>
              {t('manageOrders')}
            </p>
            <div className="flex items-center space-x-2 mt-2">
              <div className={`w-2 h-2 rounded-full ${
                connectionStatus === 'connected' 
                  ? 'bg-green-500 animate-pulse' 
                  : connectionStatus === 'disconnected'
                  ? 'bg-red-500'
                  : 'bg-yellow-500'
              }`}></div>
              <span className="text-sm" style={{ color: 'var(--muted)' }}>
                {t('updated')}: {lastUpdate.toLocaleTimeString('ru-RU', { 
                  hour: '2-digit', 
                  minute: '2-digit',
                  second: '2-digit'
                })} ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
              </span>
              <span className="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded-full">
                –°—á–µ—Ç—á–∏–∫: {previousAvailableCount}
              </span>
              <button
                onClick={async () => {
                  try {
                    const response = await fetch('/api/test/connection')
                    const data = await response.json()
                    console.log('–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', data)
                    alert(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${data.success ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}`)
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
                    alert('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                  }
                }}
                className="text-xs px-2 py-1 bg-green-100 text-green-600 rounded-full hover:bg-green-200 transition-colors"
              >
                üîß –¢–µ—Å—Ç
              </button>
              <span className={`text-xs px-2 py-1 rounded-full ${
                connectionStatus === 'connected' 
                  ? 'bg-green-100 text-green-600' 
                  : connectionStatus === 'disconnected'
                  ? 'bg-red-100 text-red-600'
                  : 'bg-yellow-100 text-yellow-600'
              }`}>
                {connectionStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 
                 connectionStatus === 'disconnected' ? '–û—Ç–∫–ª—é—á–µ–Ω–æ' : '–ü—Ä–æ–≤–µ—Ä–∫–∞...'}
              </span>
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div 
            className={`card stat-card p-4 text-center cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-[1.02] ${
              activeTab === 'available' ? 'ring-2 ring-yellow-500 bg-yellow-50' : ''
            }`}
            onClick={() => setActiveTab('available')}
          >
            <div className="flex items-center justify-center mb-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center border ${
                activeTab === 'available' 
                  ? 'bg-yellow-200 border-yellow-400' 
                  : 'bg-yellow-100 border-yellow-200'
              }`}>
                <ClockIcon className="w-4 h-4 text-yellow-600" />
              </div>
            </div>
            <div className="text-xl font-bold text-primary">{availableOrders.length}</div>
            <div className="text-x font-medium" style={{ color: 'var(--muted)' }}>{t('available')}</div>
          </div>
          
          <div 
            className={`card stat-card p-4 text-center cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-[1.02] ${
              activeTab === 'my' ? 'ring-2 ring-blue-500 bg-blue-50' : ''
            }`}
            onClick={() => setActiveTab('my')}
          >
            <div className="flex items-center justify-center mb-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center border ${
                activeTab === 'my' 
                  ? 'bg-blue-200 border-blue-400' 
                  : 'bg-blue-100 border-blue-200'
              }`}>
                <BoltIcon className="w-4 h-4 text-blue-600" />
              </div>
            </div>
            <div className="text-xl font-bold text-blue-600">{myOrders.length}</div>
            <div className="text-x font-medium" style={{ color: 'var(--muted)' }}>{t('inWork')}</div>
          </div>
          
          <div 
            className={`card stat-card p-4 text-center cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-[1.02] ${
              activeTab === 'completed' ? 'ring-2 ring-green-500 bg-green-50' : ''
            }`}
            onClick={() => setActiveTab('completed')}
          >
            <div className="flex items-center justify-center mb-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center border ${
                activeTab === 'completed' 
                  ? 'bg-green-200 border-green-400' 
                  : 'bg-green-100 border-green-200'
              }`}>
                <CheckCircleIcon className="w-4 h-4 text-green-600" />
              </div>
            </div>
            <div className="text-xl font-bold text-green-600">{completedOrders.length}</div>
            <div className="text-x font-medium" style={{ color: 'var(--muted)' }}>{t('delivered')}</div>
          </div>
          
          <div 
            className={`card stat-card p-4 text-center cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-[1.02] ${
              activeTab === 'canceled' ? 'ring-2 ring-red-500 bg-red-50' : ''
            }`}
            onClick={() => setActiveTab('canceled')}
          >
            <div className="flex items-center justify-center mb-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center border ${
                activeTab === 'canceled' 
                  ? 'bg-red-200 border-red-400' 
                  : 'bg-red-100 border-red-200'
              }`}>
                <XCircleIcon className="w-4 h-4 text-red-600" />
              </div>
            </div>
            <div className="text-xl font-bold text-red-600">{canceledOrders.length}</div>
            <div className="text-x font-medium" style={{ color: 'var(--muted)' }}>{t('canceled')}</div>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded">
            {error}
            <button 
              onClick={() => setError('')}
              className="ml-2 text-red-800 hover:text-red-900"
            >
              ‚úï
            </button>
          </div>
        )}


        {/* –í–∫–ª–∞–¥–∫–∏ –∑–∞–∫–∞–∑–æ–≤ */}
        <section className="space-y-4">
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
          <div className="card p-1">
            <div className="flex">
              <button
                onClick={() => setActiveTab('available')}
                className={`tab-button flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-lg transition-all duration-200 ${
                  activeTab === 'available'
                    ? 'bg-yellow-500 text-white shadow-md border-yellow-600'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 border-gray-200'
                }`}
              >
                <ClockIcon className="w-5 h-5" />
                <span className="font-medium">{t('availableOrders')}</span>
              </button>
              
              <button
                onClick={() => setActiveTab('my')}
                className={`tab-button flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-lg transition-all duration-200 ${
                  activeTab === 'my'
                    ? 'bg-blue-500 text-white shadow-md border-blue-600'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 border-gray-200'
                }`}
              >
                <BoltIcon className="w-5 h-5" />
                <span className="font-medium">{t('myOrders')}</span>
              </button>
              
              <button
                onClick={() => setActiveTab('completed')}
                className={`tab-button flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-lg transition-all duration-200 ${
                  activeTab === 'completed'
                    ? 'bg-green-500 text-white shadow-md border-green-600'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 border-gray-200'
                }`}
              >
                <CheckCircleIcon className="w-5 h-5" />
                <span className="font-medium">{t('completedOrders')}</span>
              </button>
              
              <button
                onClick={() => setActiveTab('canceled')}
                className={`tab-button flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-lg transition-all duration-200 ${
                  activeTab === 'canceled'
                    ? 'bg-red-500 text-white shadow-md border-red-600'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 border-gray-200'
                }`}
              >
                <XCircleIcon className="w-5 h-5" />
                <span className="font-medium">{t('canceledOrders')}</span>
              </button>
            </div>
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
          <div>
            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã */}
            {activeTab === 'available' && (
            <div>
              {availableOrders.length > 0 ? (
                <>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
                    {currentAvailableOrders.map((order) => (
                      <CompactOrderCard
                        key={order.id}
                        order={order}
                        onClick={() => handleOrderClick(order)}
                      />
                    ))}
                  </div>
                  <PaginationComponent 
                    totalItems={availableOrders.length}
                    currentPageNum={currentPage.available}
                    tabType="available"
                  />
                </>
              ) : (
                <div className="card p-12 text-center">
                  <ClockIcon className="w-16 h-16 text-yellow-300 mx-auto mb-4" />
                  <p className="text-lg" style={{ color: 'var(--muted)' }}>{t('noAvailableOrders')}</p>
                  <p className="text-sm mt-2" style={{ color: 'var(--muted)' }}>{t('newOrdersHere')}</p>
                </div>
              )}
            </div>
          )}

          {/* –ú–æ–∏ –∑–∞–∫–∞–∑—ã */}
          {activeTab === 'my' && (
            <div>
              {myOrders.length > 0 ? (
                <>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
                    {currentMyOrders.map((order) => (
                      <CompactOrderCard
                        key={order.id}
                        order={order}
                        onClick={() => handleOrderClick(order)}
                      />
                    ))}
                  </div>
                  <PaginationComponent 
                    totalItems={myOrders.length}
                    currentPageNum={currentPage.my}
                    tabType="my"
                  />
                </>
              ) : (
                <div className="card p-12 text-center">
                  <BoltIcon className="w-16 h-16 text-blue-300 mx-auto mb-4" />
                  <p className="text-lg" style={{ color: 'var(--muted)' }}>{t('noActiveOrders')}</p>
                  <p className="text-sm mt-2" style={{ color: 'var(--muted)' }}>{t('acceptFromAvailable')}</p>
                </div>
              )}
            </div>
          )}

          {/* –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã */}
          {activeTab === 'completed' && (
            <div>
              {completedOrders.length > 0 ? (
                <>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
                    {currentCompletedOrders.map((order) => (
                      <CompactOrderCard
                        key={order.id}
                        order={order}
                        onClick={() => handleOrderClick(order)}
                      />
                    ))}
                  </div>
                  <PaginationComponent 
                    totalItems={completedOrders.length}
                    currentPageNum={currentPage.completed}
                    tabType="completed"
                  />
                </>
              ) : (
                <div className="card p-12 text-center">
                  <CheckCircleIcon className="w-16 h-16 text-green-300 mx-auto mb-4" />
                  <p className="text-lg" style={{ color: 'var(--muted)' }}>{t('noCompletedOrders') || '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'}</p>
                  <p className="text-sm mt-2" style={{ color: 'var(--muted)' }}>{t('completedOrdersHere') || '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å'}</p>
                </div>
              )}
            </div>
          )}

          {/* –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã */}
          {activeTab === 'canceled' && (
            <div>
              {canceledOrders.length > 0 ? (
                <>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
                    {currentCanceledOrders.map((order) => (
                      <CompactOrderCard
                        key={order.id}
                        order={order}
                        onClick={() => handleOrderClick(order)}
                      />
                    ))}
                  </div>
                  <PaginationComponent 
                    totalItems={canceledOrders.length}
                    currentPageNum={currentPage.canceled}
                    tabType="canceled"
                  />
                </>
              ) : (
                <div className="card p-12 text-center">
                  <XCircleIcon className="w-16 h-16 text-red-300 mx-auto mb-4" />
                  <p className="text-lg" style={{ color: 'var(--muted)' }}>{t('noCanceledOrders') || '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'}</p>
                  <p className="text-sm mt-2" style={{ color: 'var(--muted)' }}>{t('canceledOrdersHere') || '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å'}</p>
                </div>
              )}
            </div>
          )}
          </div>
        </section>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ */}
        <OrderDetailModal
          order={selectedOrder}
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          onStatusUpdate={handleStatusUpdate}
          isUpdating={isUpdating}
        />
      </div>
    </div>
  )
}
