import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { sendNewOrderNotification } from '@/lib/telegram'
import type { ApiResponse } from '@/types'

// –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (ID –∑–∞–∫–∞–∑–∞ -> timestamp)
const notificationCache = new Map<string, number>()
const NOTIFICATION_COOLDOWN = 120000 // 120 —Å–µ–∫—É–Ω–¥ (2 –º–∏–Ω—É—Ç—ã) cooldown –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now()
  for (const [orderId, timestamp] of notificationCache.entries()) {
    if (now - timestamp > NOTIFICATION_COOLDOWN * 2) { // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 4 –º–∏–Ω—É—Ç
      notificationCache.delete(orderId)
      console.log(`üßπ –£–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –∑–∞–∫–∞–∑: ${orderId.slice(-8)}`)
    }
  }
}, 300000) // 5 –º–∏–Ω—É—Ç

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { orderId }: { orderId: string } = body

    console.log('API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', orderId)

    if (!orderId) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'Order ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–∞–≤–Ω–æ
    const lastNotificationTime = notificationCache.get(orderId)
    if (lastNotificationTime) {
      const timeSinceLastNotification = Date.now() - lastNotificationTime
      if (timeSinceLastNotification < NOTIFICATION_COOLDOWN) {
        console.log(`‚è∏Ô∏è API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${Math.round(timeSinceLastNotification / 1000)} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`)
        return NextResponse.json<ApiResponse>({
          success: true,
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ'
        })
      } else {
        console.log(`‚è∞ API: Cooldown –∏—Å—Ç–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)} (–ø—Ä–æ—à–ª–æ ${Math.round(timeSinceLastNotification / 1000)} —Å–µ–∫—É–Ω–¥), —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É`)
      }
    } else {
      console.log(`‚ú® API: –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        courier: true,
        orderItems: {
          include: {
            product: {
              include: {
                category: true,
                seller: true
              }
            }
          }
        }
      }
    })

    if (!order) {
      console.log('API: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderId)
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 })
    }

    console.log('API: –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', { id: order.id, status: order.status, customer: order.customerName })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å COURIER_WAIT
    if (order.status !== 'COURIER_WAIT') {
      console.log('API: –ó–∞–∫–∞–∑ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å COURIER_WAIT:', order.status)
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å COURIER_WAIT'
      }, { status: 400 })
    }

    console.log('API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.id)
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await sendNewOrderNotification(order)
      console.log('API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º timestamp –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫—ç—à
      const timestamp = Date.now()
      notificationCache.set(orderId, timestamp)
      console.log(`API: Timestamp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)}, —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${notificationCache.size}`)
    } catch (telegramError) {
      console.error('API: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', telegramError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    }

    return NextResponse.json<ApiResponse>({
      success: true,
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    })
  } catch (error) {
    console.error('Notify new order error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ'
    }, { status: 500 })
  }
}
