import { NextRequest, NextResponse } from 'next/server'
import { startTelegramPolling, stopTelegramPolling, isTelegramPollingActive } from '@/lib/telegram-polling'
import type { ApiResponse } from '@/types'

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
let isAutoStarted = false

export async function GET(request: NextRequest) {
  try {
    if (!isAutoStarted) {
      console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...')
      await startTelegramPolling()
      isAutoStarted = true
    }

    return NextResponse.json<ApiResponse>({
      success: true,
      message: 'Telegram –±–æ—Ç —Å—Ç–∞—Ç—É—Å',
      data: {
        isActive: isTelegramPollingActive(),
        isAutoStarted
      }
    })
  } catch (error) {
    console.error('Auto-start error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞'
    }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const { action } = await request.json()

    if (action === 'start') {
      await startTelegramPolling()
      isAutoStarted = true
      return NextResponse.json<ApiResponse>({
        success: true,
        message: 'Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω'
      })
    } else if (action === 'stop') {
      await stopTelegramPolling()
      isAutoStarted = false
      return NextResponse.json<ApiResponse>({
        success: true,
        message: 'Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      })
    } else {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
      }, { status: 400 })
    }
  } catch (error) {
    console.error('Control bot error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–æ–º'
    }, { status: 500 })
  }
}
