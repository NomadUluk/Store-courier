import { NextRequest, NextResponse } from 'next/server'
import { sendNotification, getCacheStats } from '@/lib/notification-manager'
import type { ApiResponse } from '@/types'

// GET - –¢–µ—Å—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function GET(request: NextRequest) {
  try {
    const stats = getCacheStats()
    
    return NextResponse.json<ApiResponse>({
      success: true,
      message: '–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç',
      data: {
        cacheStats: stats,
        endpoints: {
          single: 'POST /api/notifications - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
          bulk: 'PUT /api/notifications - –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
          stats: 'GET /api/notifications - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞',
          clear: 'DELETE /api/notifications - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞'
        },
        notificationTypes: ['NEW_ORDER', 'STATUS_UPDATE', 'ORDER_CANCELLED'],
        features: [
          '–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies',
          '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏',
          'Cooldown 5 –º–∏–Ω—É—Ç',
          '–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞',
          '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'
        ]
      }
    })
  } catch (error) {
    console.error('Test notification system error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    }, { status: 500 })
  }
}

// POST - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { orderId, type } = body
    
    if (!orderId || !type) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'orderId –∏ type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞'
      }, { status: 400 })
    }
    
    console.log('üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { orderId: orderId?.slice(-8), type })
    
    const result = await sendNotification(request, {
      orderId,
      type,
      oldStatus: 'CREATED' // –î–ª—è —Ç–µ—Å—Ç–∞
    })
    
    const response = NextResponse.json<ApiResponse>({
      success: result.success,
      message: `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.message}`,
      data: {
        result,
        cacheStats: getCacheStats()
      }
    })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è —Ç–µ—Å—Ç–∞
    if (result.success && !result.duplicate) {
      const notificationKey = `${result.orderId}_${result.type}`
      const cookieName = `notification_${notificationKey}`
      const timestamp = result.timestamp.toString()
      
      response.cookies.set(cookieName, timestamp, {
        maxAge: 300, // 5 –º–∏–Ω—É—Ç
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict'
      })
    }
    
    return response
    
  } catch (error) {
    console.error('Test notification error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    }, { status: 500 })
  }
}
