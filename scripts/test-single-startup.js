/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
 */

const BASE_URL = 'http://localhost:3000'

async function testSingleStartup() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...')
    try {
      const response = await fetch(`${BASE_URL}/api/telegram/auto-start`)
      const data = await response.json()
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', data.message)
      console.log('üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:', data.data?.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω')
    } catch (error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω:', error.message)
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev')
      return
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞ (5 –ø—Ä–æ–≤–µ—Ä–æ–∫)...')
    for (let i = 1; i <= 5; i++) {
      try {
        const response = await fetch(`${BASE_URL}/api/telegram/auto-start`)
        const data = await response.json()
        
        console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i}/5: ${data.data?.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`)
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000))
        
      } catch (error) {
        console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i}/5: ‚ùå –û—à–∏–±–∫–∞ - ${error.message}`)
      }
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...')
    try {
      const statusResponse = await fetch(`${BASE_URL}/api/telegram/auto-start`)
      const statusData = await statusResponse.json()
      
      if (!statusData.data?.isActive) {
        console.log('üîÑ –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫...')
        
        const startResponse = await fetch(`${BASE_URL}/api/telegram/auto-start`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'start' })
        })
        const startData = await startResponse.json()
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', startData.message)
      } else {
        console.log('‚úÖ –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω')
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', error.message)
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...')
    const endpoints = [
      { url: '/api/telegram/auto-start', method: 'GET' },
      { url: '/api/telegram/start-polling', method: 'POST' },
      { url: '/api/telegram/force-stop', method: 'POST' }
    ]

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`${BASE_URL}${endpoint.url}`, {
          method: endpoint.method
        })
        const data = await response.json()
        console.log(`   ‚úÖ ${endpoint.url} (${endpoint.method}): ${response.status}`)
      } catch (error) {
        console.log(`   ‚ùå ${endpoint.url} (${endpoint.method}): –û—à–∏–±–∫–∞ - ${error.message}`)
      }
    }

    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    console.log('\nüìã –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    console.log('‚úÖ –ù–µ—Ç –æ—à–∏–±–∫–∏ "ETELEGRAM 409 conflict"')
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞')
    console.log('‚úÖ TelegramBotInitializer —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å')
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Å—Ç–∞–±–∏–ª–µ–Ω –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏')
    console.log('‚úÖ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')

    console.log('\nüí° –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:')
    console.log('‚Ä¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ (server-init.ts)')
    console.log('‚Ä¢ TelegramBotInitializer —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞')
    console.log('‚Ä¢ API /auto-start —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞')
    console.log('‚Ä¢ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ POST /auto-start')

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSingleStartup()
