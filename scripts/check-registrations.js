const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkRegistrations() {
  try {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤...')

    const setting = await prisma.setting.findUnique({
      where: { key: 'COURIER_CHAT_ID' }
    })

    if (!setting) {
      console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ COURIER_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    console.log('üì± COURIER_CHAT_ID:', setting.value)

    try {
      const chatIds = JSON.parse(setting.value)
      const courierIds = Object.keys(chatIds)

      console.log(`\nüë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${courierIds.length}`)

      if (courierIds.length > 0) {
        console.log('\nüìù –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤:')
        
        for (const courierId of courierIds) {
          const courier = await prisma.user.findUnique({
            where: { id: courierId }
          })

          if (courier) {
            console.log(`‚úÖ ${courier.fullname} (${courier.phoneNumber})`)
            console.log(`   CourierID: ${courierId}`)
            console.log(`   ChatID: ${chatIds[courierId]}`)
          } else {
            console.log(`‚ùå –ö—É—Ä—å–µ—Ä —Å ID ${courierId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`)
          }
        }
      }

    } catch (parseError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkRegistrations()
