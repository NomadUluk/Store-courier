const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function migrateToCourierChatId() {
  try {
    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å TELEGRAM_CHAT_ID –Ω–∞ COURIER_CHAT_ID...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
    const oldSetting = await prisma.setting.findUnique({
      where: { key: 'TELEGRAM_CHAT_ID' }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    const newSetting = await prisma.setting.findUnique({
      where: { key: 'COURIER_CHAT_ID' }
    })

    let dataToMigrate = '{}'
    
    if (oldSetting && oldSetting.value && oldSetting.value !== '{}') {
      console.log('üìã –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º –ø–æ–ª–µ TELEGRAM_CHAT_ID:', oldSetting.value)
      dataToMigrate = oldSetting.value
    }

    if (newSetting) {
      console.log('üìã –ü–æ–ª–µ COURIER_CHAT_ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', newSetting.value)
      
      // –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ–º –ø–æ–ª–µ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
      if (newSetting.value && newSetting.value !== '{}') {
        try {
          const oldData = JSON.parse(dataToMigrate)
          const newData = JSON.parse(newSetting.value)
          const mergedData = { ...oldData, ...newData }
          dataToMigrate = JSON.stringify(mergedData)
          console.log('üîÄ –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª–µ–π')
        } catch (e) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ')
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      await prisma.setting.update({
        where: { key: 'COURIER_CHAT_ID' },
        data: { value: dataToMigrate }
      })
      console.log('‚úÖ –ü–æ–ª–µ COURIER_CHAT_ID –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await prisma.setting.create({
        data: {
          key: 'COURIER_CHAT_ID',
          value: dataToMigrate
        }
      })
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ COURIER_CHAT_ID')
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const finalSetting = await prisma.setting.findUnique({
      where: { key: 'COURIER_CHAT_ID' }
    })

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ COURIER_CHAT_ID:', finalSetting.value)

    try {
      const chatIds = JSON.parse(finalSetting.value)
      const courierIds = Object.keys(chatIds)
      console.log(`üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: ${courierIds.length}`)
      
      if (courierIds.length > 0) {
        console.log('\nüìù –°–ø–∏—Å–æ–∫:')
        for (const courierId of courierIds) {
          const courier = await prisma.user.findUnique({
            where: { id: courierId }
          })
          if (courier) {
            console.log(`  - ${courier.fullname} (${courier.phoneNumber}): ${chatIds[courierId]}`)
          }
        }
      }
    } catch (e) {
      console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON')
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
    if (oldSetting && oldSetting.value !== '{}') {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ TELEGRAM_CHAT_ID')
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

migrateToCourierChatId()
